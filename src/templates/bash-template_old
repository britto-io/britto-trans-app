#!/usr/bin/env bash

###  ------------------------------- ###
###  Helper methods for BASH scripts ###
###  ------------------------------- ###

# Detect if we should use JAVA_HOME or just try PATH.
get_java_cmd() {
  if [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
    echo "$JAVA_HOME/bin/java"
  else
    echo "java"
  fi
}

dlog () {
  [[ $debug ]] && echoerr "$@"
}

addJava () {
  dlog "[addJava] arg = '$1'"
  java_args+=( "$1" )
}

# Loads a configuration file full of default command line options for this script.
loadConfigFile() {
  cat "$1" | sed '/^\#/d'
}

is_function_defined() {
  declare -f "$1" > /dev/null
}

require_arg () {
  local type="$1"
  local opt="$2"
  local arg="$3"
  if [[ -z "$arg" ]] || [[ "${arg:0:1}" == "-" ]]; then
    die "$opt requires <$type> argument"
  fi
}

addDebugger () {
  addJava "-Xdebug"
  addJava "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$1"
}

# Processes incoming arguments and places them in appropriate global variables.  called by the run method.
process_args () {
  local no_more_snp_opts=0
  while [[ $# -gt 0 ]]; do
    case "$1" in
             --) shift && no_more_snp_opts=1 && break ;;
       -h|-help) usage; exit 1 ;;
    -v|-verbose) verbose=1 && shift ;;
      -d|-debug) debug=1 && shift ;;

    -no-version-check) no_version_check=1 && shift ;;

           -mem) require_arg integer "$1" "$2" && app_mem="$2" && shift 2 ;;
     -jvm-debug) require_arg port "$1" "$2" && addDebugger $2 && shift 2 ;;

          -main) custom_mainclass="$2" && shift 2 ;;

     -java-home) require_arg path "$1" "$2" && java_cmd="$2/bin/java" && shift 2 ;;

 -D*|-agentlib*) addJava "$1" && shift ;;
            -J*) addJava "${1:2}" && shift ;;
              *) addResidual "$1" && shift ;;
    esac
  done

  if [[ no_more_snp_opts ]]; then
    while [[ $# -gt 0 ]]; do
      addResidual "$1" && shift
    done
  fi

  is_function_defined process_my_args && {
    myargs=("${residual_args[@]}")
    residual_args=()
    process_my_args "${myargs[@]}"
  }
}

# a ham-fisted attempt to move some memory settings in concert
# so they need not be messed around with individually.
get_mem_opts () {
  local mem=${1:-1024}
  local perm=$(( $mem / 4 ))
  (( $perm > 256 )) || perm=256
  (( $perm < 1024 )) || perm=1024
  local codecache=$(( $perm / 2 ))

  # if we detect any of these settings in ${java_opts} we need to NOT output our settings.
  # The reason is the Xms/Xmx, if they don't line up, cause errors.
  if [[ "${java_opts}" == *-Xmx* ]] ||
     [[ "${java_opts}" == *-Xms* ]] ||
     [[ "${java_opts}" == *-XX:MaxPermSize* ]] ||
     [[ "${java_opts}" == *-XX:ReservedCodeCacheSize* ]] ||
     # check java arguments for settings, too
     [[ "${java_args[@]}" == *-Xmx* ]] ||
     [[ "${java_args[@]}" == *-Xms* ]] ||
     [[ "${java_args[@]}" == *-XX:MaxPermSize* ]] ||
     [[ "${java_args[@]}" == *-XX:ReservedCodeCacheSize* ]];
  then
    echo ""
  elif [[ !$no_version_check ]] && [[ "$java_version" > "1.8" ]]; then
    echo "-Xms${mem}m -Xmx${mem}m -XX:ReservedCodeCacheSize=${codecache}m"
  else
    echo "-Xms${mem}m -Xmx${mem}m -XX:MaxPermSize=${perm}m -XX:ReservedCodeCacheSize=${codecache}m"
  fi
}

1is_function_defined() {
  declare -f "$1" > /dev/null
}

execRunner () {
  # print the arguments one to a line, quoting any containing spaces
  [[ $verbose || $debug ]] && echo "# Executing command line:" && {
    for arg; do
      if printf "%s\n" "$arg" | grep -q ' '; then
        printf "\"%s\"\n" "$arg"
      else
        printf "%s\n" "$arg"
      fi
    done
    echo ""
  }

  # we use "exec" here for our pids to be accurate.
  exec "$@"
}

# Actually runs the script.
run() {
  # TODO - check for sane environment

  # process the combined args, then reset "$@" to the residuals
  process_args "$@"
  set -- "${residual_args[@]}"
  argumentCount=$#

  if [ -n "$custom_mainclass" ]; then
    mainclass="$custom_mainclass"
  else
    mainclass="$app_mainclass"
  fi

  # Now we check to see if there are any java opts on the environment. These get listed first, with the script able to override them.
  if [[ "$JAVA_OPTS" != "" ]]; then
    java_opts="${JAVA_OPTS}"
  fi

  # run sbt
  echo "$java_cmd" \
      $(get_mem_opts $app_mem) \
      ${java_opts[@]} \
      "${java_args[@]}" \
      -cp "$app_classpath" \
      $mainclass \
      "${app_commands[@]}" \
      "${residual_args[@]}"

  execRunner "$java_cmd" \
    $(get_mem_opts $app_mem) \
    ${java_opts[@]} \
    "${java_args[@]}" \
    -cp "$app_classpath" \
    $mainclass \
    "${app_commands[@]}" \
    "${residual_args[@]}"

  local exit_code=$?
  if is_cygwin; then
    stty icanon echo > /dev/null 2>&1
  fi
  exit $exit_code
}

###  ------------------------------- ###
###  Main script                     ###
###  ------------------------------- ###

declare -a residual_args
declare -a java_args
declare -a app_commands
declare -r app_home="$(cd "$(cd "$(dirname "$0")"; pwd -P)"/..; pwd)"
declare -r lib_dir="${app_home}/lib"

declare -r app_mainclass="play.core.server.NettyServer"

declare -r app_classpath="/etc/simple-app:$lib_dir/*"

declare -r script_conf_file="/etc/default/simple-app"

addJava "-Duser.dir=$(cd "${app_home}/.."; pwd -P)"

# java_cmd is overrode in process_args when -java-home is used
declare java_cmd=$(get_java_cmd)

# if configuration files exist, prepend their contents to $@ so it can be processed by this runner
[[ -f "$script_conf_file" ]] && set -- $(loadConfigFile "$script_conf_file") "$@"

echo "exec command: $@"
run "$@"
